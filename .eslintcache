[{"/Users/dan/Dropbox/Development/weatherclock/src/index.tsx":"1","/Users/dan/Dropbox/Development/weatherclock/src/reportWebVitals.ts":"2","/Users/dan/Dropbox/Development/weatherclock/src/serviceWorkerRegistration.ts":"3","/Users/dan/Dropbox/Development/weatherclock/src/components/App/index.tsx":"4","/Users/dan/Dropbox/Development/weatherclock/src/components/Clock/index.tsx":"5","/Users/dan/Dropbox/Development/weatherclock/src/components/ClockTime/index.tsx":"6","/Users/dan/Dropbox/Development/weatherclock/src/utils/timeUtils.ts":"7"},{"size":839,"mtime":1610825240269,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610223713278,"results":"10","hashOfConfig":"9"},{"size":5256,"mtime":1610223713279,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1610824870940,"results":"12","hashOfConfig":"9"},{"size":757,"mtime":1610822706567,"results":"13","hashOfConfig":"9"},{"size":723,"mtime":1610824529663,"results":"14","hashOfConfig":"9"},{"size":1074,"mtime":1610817837820,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yjajmy",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},"/Users/dan/Dropbox/Development/weatherclock/src/index.tsx",[],"/Users/dan/Dropbox/Development/weatherclock/src/reportWebVitals.ts",[],["34","35"],"/Users/dan/Dropbox/Development/weatherclock/src/serviceWorkerRegistration.ts",[],"/Users/dan/Dropbox/Development/weatherclock/src/components/App/index.tsx",["36"],"import React, { Component } from 'react';\nimport Clock from '../Clock';\nimport './App.css';\n\ninterface AppProps {\n    // No props yet!\n}\n\ninterface AppState {\n    // No state yet!\n}\n\n\nclass App extends Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n    }\n    \n    render() {\n        return (\n            <div className=\"wc-App\">\n                {/* <Weather /> */}\n                <Clock />\n            </div>\n        );\n    }\n}\n    \nexport default App;\n    ","/Users/dan/Dropbox/Development/weatherclock/src/components/Clock/index.tsx",[],"/Users/dan/Dropbox/Development/weatherclock/src/components/ClockTime/index.tsx",["37"],"\nimport React, { FunctionComponent } from 'react';\nimport { getFormattedHour, getFormattedMinute } from '../../utils/timeUtils';\nimport Clock from '../Clock';\nimport './ClockTime.css';\n\ninterface ClockTimeProps {\n    currentTime: Date\n    use12HourTime?: boolean\n}\n\nconst ClockTime: FunctionComponent<ClockTimeProps> = ({currentTime, use12HourTime = false}) => {\n    return(\n        <div className=\"wc-ClockTime\">\n            <span className=\"wc-ClockTime-hour\">{ getFormattedHour(currentTime, use12HourTime) }</span>\n            <span className=\"wc-ClockTime-separator\"></span>\n            <span className=\"wc-ClockTime-minute\">{ getFormattedMinute(currentTime) }</span>\n        </div>\n    );\n}\n\nexport default ClockTime;\n","/Users/dan/Dropbox/Development/weatherclock/src/utils/timeUtils.ts",["38"],"import { createModuleResolutionCache } from \"typescript\";\n\nexport const getFormattedHour = (currentTime: Date, use12HourMode: boolean = false) => {\n    return (use12HourMode ? (\n        currentTime.getHours() % 12 || 12\n    ) : currentTime.getHours()).toString();\n};\n\nexport const getAmPm = (currentTime: Date) => {\n    return currentTime.getHours() >= 12 ? 'PM' : 'AM';\n}\n\nexport const getFormattedMinute = (currentTime: Date) => {\n    const minutesString = currentTime.getMinutes().toString();\n\n    return minutesString.length > 1 ? minutesString : '0' + minutesString;\n}\n\nexport const getFormattedDay = (currentTime: Date) => {\n    // One day, I will do proper internationalization. Today is not that day.\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    return dayNames[currentTime.getDay()];\n}\n\nexport const getFormattedDate = (currentTime: Date) => {\n    const monthNames = ['Jan','Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\n    return `${monthNames[currentTime.getMonth()]} ${currentTime.getDate()}`;\n}\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":15,"column":5,"nodeType":"45","messageId":"46","endLine":17,"endColumn":6},{"ruleId":"47","severity":1,"message":"48","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":13},{"ruleId":"47","severity":1,"message":"51","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":37},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'Clock' is defined but never used.","Identifier","unusedVar","'createModuleResolutionCache' is defined but never used.","no-global-assign","no-unsafe-negation"]